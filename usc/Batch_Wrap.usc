'********************************************************************************************
'AUTHOR: Ralph Whaite
'DATE: 08-27-2015                                                                            *
%version 01.00 08/27/2015                                                                 
'********************************************************************************************
'Original Version of this script is TXBATCH
'AUTHOR: Chris Love                                                                         *
'DATE: 12-8-2004                                                                            *
'
'Changelog
'08/27/2005 01.00
'		First Major Re-Write to run completely from parm file.

start Batch_Wrap(parmfile, option, retcode)
'*********************************Variables***************************************************
'load configuration
parmfile          is x
option            is x     ' Parameters for script behavior (Separated by semicolon)
                              ' Valid Options :
retcode           is b     ' Returned code for script execution (non-zero indicates error)


SEQOUT     is x SEQOUT     = "/c0/EXPORT/carebatch/TXFile"
batchdir   is x batchdir   = "/c0/EXPORT/carebatch/"
historydir is x historydir = "/c0/EXPORT/carebatch/hx/"
jcl_file   is x jcl_file   = "/c0/EXPORT/carebatch/jcl/JCLProd.txt"
tracefile  is x tracefile  = "/c4/EXPORT2/whaiter/CareTrace.txt"
tracefile2 is x tracefile2 = "CareTrace.txt"
remote-sys is x remote-sys = "hhsibmprod.hhsc.texas.gov"
submitfile is x submitfile = "N"
COMPCODE   is x COMPCODE   = "230"
footertxt  is x              'Text String for footer record
FileNum		 is b							 'File Handle for adding footer record
CLLIST		 is x							 'Saved List ID fromt he parm file.  
cltList[]  is x							 'Client List Array from to be handed to dx-batch if CLIST is dp
xtranscount is x
holidays[] is x
ITnotify[] is x
notify[]   is x

'Misc
go            is x
today         is x today        = $today
day           is x day          = $seg(today,1,2)
month         is x month        = $seg(today,4,2)
year          is x year         = $seg(today,7,4)
holiday				is x

'User Messages
badfile_sub   is x badfile_sub  = "The batch script could not open the batched files!"
badfile_body  is x badfile_body = "The file was not available at the time the script was last run."
badftp_sub    is x badftp_sub   = "The batch script could not ftp the new files!"
badftp_body   is x badftp_body  = "FTP attempt failed. "
errmsg        is x errmsg       = "File Already Present for Today's Date -- Process Aborted. CONTACT MIS DEPT."
errmsg2       is x errmsg2      = "TXBATCH2 CANCELED!!"

'12-13-2005
'When $ftp fails one of these error messages will be added to the email body
' so we can see what the return code was quicker
linefeed      is x  linefeed  = x"0a"
ftperror      is x  ftperror  = linefeed + linefeed + "$FTP Return code was: "
ftpErrorRc[]  is x  ftpErrorRc[1] = linefeed + "1 - Login failed on remote system"
                    ftpErrorRc[2] = linefeed + "2 - Local directory set failed"
                    ftpErrorRc[3] = linefeed + "3 - Remote directory set failed"
                    ftpErrorRc[4] = linefeed + "4 - Invalid ftp command issued"
                    ftpErrorRc[5] = linefeed + "5 - File name specified doesn't exist"
                    ftpErrorRc[6] = linefeed + "6 - Zero length file transferred (warning only; process is completed normally)"
                    ftpErrorRc[7] = linefeed + "7 - The connection was refused by the remote system"

'Return Codes
rc 			  is i 'ftp
rc2 		  is i 'unix commands
rc3           is i 'filecheck
rc4           is i '$misprog
rc5           is i '2nd checkfile
ftp           is i 'Check to make sure username/password is good

'We will need a tempfile for some unix commands later
tempfile      is x  rc = $tempfile(tempfile)

'Unix Commands
cmd           is x 'generic $unix command
fold          is x fold   = "fold -bw80 " + SEQOUT + " > " + tempfile + " ; cp " + tempfile + " " + SEQOUT 
catjcl        is x catjcl = "(echo | cat " + jcl_file + " " + SEQOUT + ") > " + tempfile + " ; cp " + tempfile + " " + SEQOUT 
archive       is x archive = "mv " + SEQOUT + " " + historydir + "TXFile" + day + month + year
perl          is x perl = "cd " + batchdir + ";perl -p -e 's/\n/\r\n/' < " + tracefile2 + " > Tempfile;mv Tempfile " + tracefile2
                   'Example  perl -p -e 's/\n/\r\n/' < CareTrace.txt > Tempfile;mv Tempfile CareTrace.txt

'Prescripts and Postscripts
Prescript[]   is x
PreCount      is i
c							is i
Postscript[]   is x
PostCount      is i

'TXBATCH Parameters
prog					is x  prog = "TXBATCH5"

'FTP
win           is i
k             is i
ln            is i
temppath      is x
list[]        is x
ftpcmd[]      is x
login-id      is x
login-passwd  is x
remote-dir    is x

'Turn on our tracefile if indicated by DP in the parmfile
if tracefile dp
	$trace("path.on", tracefile)
endif

$trace("off")
getParm(parmfile)
getOption(option)
$trace("on")

'Check if our TXFile is still in the carebatch directory, we don't want to accidetly over write a batch file that has not been
'submitted and subsequently archived.
rc3 = $checkfile(SEQOUT)
if rc3 < 1
 $disp(errmsg,17,5,80,"H")
 $acpt()
 return
endif

'Check for Batch Holiday.  If yes, display message and stop processing
rc = $find($today,holidays[],1,"F")
if rc > 0
	$disp("STOP - Batch Holiday ",17,5,21) 
	$disp(Holiday,17,26,22,"H")
	$disp("Press Any key to Cancel", 19,10)
	$acpt()
	return
endif

'Now on to processing the batch

'Test for the FTP User ID and Password and make sure they are valid by doing a quick FTP command.
$disp(`"Version: " + $scriptver`,2,65,15,"H")
$disp("Please enter Care User ID: ",17,5,32,"H")
$acpt(login-id,17,35,8)
$disp("Please enter Care Password: ",18,5,33,"H")
$acpt(login-passwd,18,35,8)
$disp("Complete Process?  (Y/N)",20,5,30,"H")
$acpt(go,20,33,1)
if go = "Y" or go = "y"
 if login-id !dp or login-passwd !dp
  $erasewin(0)
  $disp("NO USERNAME OR PASSWORD ENTERED!!! ",17,5,32,"H")
  $acpt()
  return
 endif
 'Check if the username/password is still good
 $disp("Testing Password/Username",22,10,30,"H")
 if submitfile = "Y"
 	ftp = $ftp(ftpcmd[4], remote-sys, login-id, login-passwd, batchdir, remote-dir)  
 else
 	ftp = 0
 endif
 if ftp = 1
  $erasewin(0)
  $disp("BAD USERNAME OR PASSWORD ENTERED!!! ",17,5,32,"H")
  $acpt()
  return 
 endif 
endif
 
 'See if any Prescripts and defined and call them in order
 $disp("Running Pre-Processing Scripts",22,10,30,"H")
 $clear(c)
 PreCount = $maxarray(PreScript[])
 do while c++ < PreCount
 	$trace("off")
 	call PreScript[c](parmfile,option,retcode)
  $trace("on") 
 enddo


  rc4 = $misprog(prog,parmfile)
  rc5 = $checkfile(SEQOUT)

  'Ok, if our program ran fine then do our unix commands and ftp our file
  if rc5 = 0
  (void)$unix(fold)

	transcount(seqout)  'This functions gets the transaction count from the file and removes the footer record
	
	option += "transcount`" + $castx(transcount) + ";"
	option += ";batchfilename`" + SEQOUT + ";"

'See if a list ID was defined in the parfile.  If yes, put that client list into an array to hand to dx-batch.
 if CLLIST dp
 	rc = $getlist(cltlist[],2,CLLIST)
 endif

'See if any Prescripts and defined and call them in order
 $clear(c)
 PostCount = $maxarray(PostScript[])
 $trace("off")
 do while c++ < PostCount
 	call PostScript[c](parmfile,option,retcode,cltlist[])
 enddo
$trace("on")
  
option = $parse(option,1,";" )
$parsem(option,1,"`",option,xtranscount)
footertxt = COMPCODE + "2A" + addfield($casti(xtranscount), "999999")

'Open the batch file to add the footer
 FileNum = $fileavail()
 rc = $openfile(FileNum,SEQOUT,"E")
 rc = $writefile(FileNum,footertxt)
 rc = $closefile(FileNum,"C")
  
  (void)$unix(catjcl)

ftpcmd[1] = "as"
ftpcmd[2] = "filetype=jes"
ftpcmd[3] = "put " + SEQOUT
ftpcmd[4] = "quit"

if submitfile = "Y"
  rc = $ftp(ftpcmd[], remote-sys, login-id, login-passwd, batchdir, remote-dir)
else
	rc = 0
endif
  'If the ftp fails then it will return something other than zero
  'When that happens email MIS and the person who's running the script
   if rc > 0
		if $maxarray(ITNotify[]) > 0
      badftp_body += ftperror + ftpErrorRc[rc]
  	  rc = $email(ITnotify[], badftp_sub, badftp_body)
  	endif
   else
    (void)$unix(archive)
   endif
 'else TXFile was never created for some reason, F9'd script maybe
  else
   $erasewin(0)
   $disp(errmsg2,22,5,50,"H")
   $acpt() 
  endif

 'run perl command to fix carriage returns.  This is helpful if the tracefile is sent to the end user.
 'It fixes the file so that it will display properly in Notepad.  Most end users do not have
 'Boxer or UltraEdit
 (void)$unix(perl)
 'Stop tracing now

'Combine the notify and IT notify array of email addresses to send everyone the success message.
rc = $arrpush(notify[],ITnotify[])
rc = $sortu(notify[])
 
if $maxarray(notify[]) > 0
	$clear(c)
	do while c++ < $maxarray(notify[])
    cmd = "(cd " + batchdir + ";Echo CareBatch TraceFile;"
    cmd += "uuencode " + tracefile2 + " " + tracefile2 +  ") |mail -s 'CareBatch TraceFile' " + notify[c]
    (void)$unix(cmd)
  enddo
endif

$trace("off")

end Batch_Wrap 

%include inc_GetParm
%include inc_GetOption

function transcount(LegacyBatch) is i

rc          is i
itranscount is i
transcount  is i
LegacyBatch is x
LastLine    is x
cmd1				is x
cmd2				is x
tempfile    is x

rc = $tempfile(tempfile)

cmd1 = "tail -n 0 " + LegacyBatch
cmd2 = "sed '$d' " + LegacyBatch + " > " + tempfile + " ; cp " + tempfile + " " + LegacyBatch

rc = $unix(cmd1,LastLine)
rc = rc
rc = $unix(cmd2)
rc = rc

LastLine = $seg(LastLine,6,6)

transcount = $casti(LastLine)


end transcount

dynamic function addfield(value, formatstr) is x
value       is v
formatstr   is x

addfield = $formatf(value, formatstr)

end addfield




 
